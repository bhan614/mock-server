#!/usr/bin/env node

/**
 * Module dependencies.
 */
var env = require('../server/config/index');
var logger = require('../server/helper/mylogger').Logger;
var app = require('../server/index');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create 8090 index.html
 */
// if (process.env.NODE_ENV !== 'product') {
//     http.createServer(function (req, res) {
//         res.writeHead(302, {
//             'Content-type': 'text/html',
//             'Location': env.redirectUrl
//         });
//         res.end();
//     }).listen('8080', function () {
//         logger.info('Transition server listening on port 8080');
//     });
// }

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    logger.info('Listening on ' + bind);
    logger.info(`current env is [${process.env.NODE_ENV}]`);
}

process.on('uncaughtException', function (e) {
    logger.error(e.stack);
});